// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deployPB/deploy.proto

package deployPBconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	deployPB "github.com/orange-juzipi/cert-deploy/pb/deployPB"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeployServiceName is the fully-qualified name of the DeployService service.
	DeployServiceName = "deployPB.DeployService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeployServiceRegisterClientProcedure is the fully-qualified name of the DeployService's
	// RegisterClient RPC.
	DeployServiceRegisterClientProcedure = "/deployPB.DeployService/RegisterClient"
	// DeployServiceNotifyProcedure is the fully-qualified name of the DeployService's Notify RPC.
	DeployServiceNotifyProcedure = "/deployPB.DeployService/Notify"
)

// DeployServiceClient is a client for the deployPB.DeployService service.
type DeployServiceClient interface {
	// 注册客户端
	RegisterClient(context.Context, *deployPB.RegisterClientRequest) (*deployPB.RegisterClientResponse, error)
	// 通知
	Notify(context.Context, *deployPB.NotifyRequest) (*connect.ServerStreamForClient[deployPB.NotifyResponse], error)
}

// NewDeployServiceClient constructs a client for the deployPB.DeployService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeployServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeployServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deployServiceMethods := deployPB.File_deployPB_deploy_proto.Services().ByName("DeployService").Methods()
	return &deployServiceClient{
		registerClient: connect.NewClient[deployPB.RegisterClientRequest, deployPB.RegisterClientResponse](
			httpClient,
			baseURL+DeployServiceRegisterClientProcedure,
			connect.WithSchema(deployServiceMethods.ByName("RegisterClient")),
			connect.WithClientOptions(opts...),
		),
		notify: connect.NewClient[deployPB.NotifyRequest, deployPB.NotifyResponse](
			httpClient,
			baseURL+DeployServiceNotifyProcedure,
			connect.WithSchema(deployServiceMethods.ByName("Notify")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deployServiceClient implements DeployServiceClient.
type deployServiceClient struct {
	registerClient *connect.Client[deployPB.RegisterClientRequest, deployPB.RegisterClientResponse]
	notify         *connect.Client[deployPB.NotifyRequest, deployPB.NotifyResponse]
}

// RegisterClient calls deployPB.DeployService.RegisterClient.
func (c *deployServiceClient) RegisterClient(ctx context.Context, req *deployPB.RegisterClientRequest) (*deployPB.RegisterClientResponse, error) {
	response, err := c.registerClient.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// Notify calls deployPB.DeployService.Notify.
func (c *deployServiceClient) Notify(ctx context.Context, req *deployPB.NotifyRequest) (*connect.ServerStreamForClient[deployPB.NotifyResponse], error) {
	return c.notify.CallServerStream(ctx, connect.NewRequest(req))
}

// DeployServiceHandler is an implementation of the deployPB.DeployService service.
type DeployServiceHandler interface {
	// 注册客户端
	RegisterClient(context.Context, *deployPB.RegisterClientRequest) (*deployPB.RegisterClientResponse, error)
	// 通知
	Notify(context.Context, *deployPB.NotifyRequest, *connect.ServerStream[deployPB.NotifyResponse]) error
}

// NewDeployServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeployServiceHandler(svc DeployServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deployServiceMethods := deployPB.File_deployPB_deploy_proto.Services().ByName("DeployService").Methods()
	deployServiceRegisterClientHandler := connect.NewUnaryHandlerSimple(
		DeployServiceRegisterClientProcedure,
		svc.RegisterClient,
		connect.WithSchema(deployServiceMethods.ByName("RegisterClient")),
		connect.WithHandlerOptions(opts...),
	)
	deployServiceNotifyHandler := connect.NewServerStreamHandlerSimple(
		DeployServiceNotifyProcedure,
		svc.Notify,
		connect.WithSchema(deployServiceMethods.ByName("Notify")),
		connect.WithHandlerOptions(opts...),
	)
	return "/deployPB.DeployService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeployServiceRegisterClientProcedure:
			deployServiceRegisterClientHandler.ServeHTTP(w, r)
		case DeployServiceNotifyProcedure:
			deployServiceNotifyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeployServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeployServiceHandler struct{}

func (UnimplementedDeployServiceHandler) RegisterClient(context.Context, *deployPB.RegisterClientRequest) (*deployPB.RegisterClientResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deployPB.DeployService.RegisterClient is not implemented"))
}

func (UnimplementedDeployServiceHandler) Notify(context.Context, *deployPB.NotifyRequest, *connect.ServerStream[deployPB.NotifyResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("deployPB.DeployService.Notify is not implemented"))
}
